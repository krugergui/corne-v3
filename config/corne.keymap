/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <14 15>;
        };

        left_curly_braces {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <26 27>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 9>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <20 21>;
        };

        right_braces {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <33 32>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
        };

        LessThan {
            bindings = <&kp LT>;
            key-positions = <4 3>;
        };

        GreatherThan {
            bindings = <&kp GT>;
            key-positions = <7 8>;
        };
    };

    behaviors {
        layer_or_keypress: layer_or_keypress {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_OR_KEYPRESS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tap_hold_keypress: tap_hold_keypress {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_HOLD_KEYPRESS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB        &kp MINUS                  &kp U                          &kp COMMA                    &kp C                       &kp Z            &kp Q      &kp G                       &kp Y                       &kp H                          &kp SEMICOLON              &kp BACKSLASH
&kp BACKSPACE  &tap_hold_keypress LCMD O  &tap_hold_keypress LEFT_ALT I  &tap_hold_keypress LSHIFT A  &tap_hold_keypress LCTRL N  &kp M            &kp D      &tap_hold_keypress RCTRL T  &tap_hold_keypress RSHFT S  &tap_hold_keypress LEFT_ALT L  &tap_hold_keypress RGUI R  &kp B
&kp PIPE       &kp SQT                    &kp SLASH                      &kp DOT                      &kp W                       &kp V            &kp J      &kp P                       &kp F                       &kp K                          &kp X                      &kp UNDER
                                                                         &kp DEL                      &layer_or_keypress 1 E      &kp BACKSPACE    &kp ENTER  &layer_or_keypress 2 SPACE  &kp TAB
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp PLUS                        &kp NUMBER_1                              &kp NUMBER_2                  &kp NUMBER_3                       &kp KP_MULTIPLY    &trans    &trans    &trans  &trans     &trans     &trans
&trans  &tap_hold_keypress LEFT_GUI N0  &tap_hold_keypress LA(LEFT_ALT) NUMBER_4  &tap_hold_keypress LSHIFT N5  &tap_hold_keypress LCTRL NUMBER_6  &kp KP_DIVIDE      &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp PG_UP  &kp HOME
&trans  &kp MINUS                       &kp N7                                    &kp N8                        &kp N9                             &kp KP_EQUAL       &trans    &trans    &trans  &trans     &kp PG_DN  &kp END
                                                                                  &trans                        &trans                             &trans             &trans    &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &trans   &trans   &kp BSPC
&trans   &trans    &trans  &trans    &trans    &trans       &trans     &kp EQUAL  &trans           &trans   &trans   &kp GRAVE
&kp F1   &kp F2    &kp F3  &kp F4    &kp F5    &kp F6       &kp F7     &kp F8     &kp F9           &kp F10  &kp F11  &kp F12
                           &trans    &trans    &trans       &trans     &trans     &kp RALT
            >;
        };

        both {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &rgb_ug RGB_COLOR_HSB(245,100,50)  &rgb_ug RGB_COLOR_HSB(0,100,50)     &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG
&trans        &trans          &trans        &trans        &rgb_ug RGB_COLOR_HSB(311,100,50)  &rgb_ug RGB_COLOR_HSB(54,100,50)    &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &trans
&bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &rgb_ug RGB_COLOR_HSB(0,0,100)     &rgb_ug RGB_COLOR_HSB(121,95,49)    &trans           &trans           &trans           &trans           &trans           &trans
                                            &trans        &trans                             &trans                              &trans           &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
