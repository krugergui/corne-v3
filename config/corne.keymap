/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <14 15>;
            timeout-ms = <50>;
        };

        left_curly_braces {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <26 27>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 9>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <20 21>;
            timeout-ms = <50>;
        };

        right_braces {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <33 32>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        LessThan {
            bindings = <&kp LT>;
            key-positions = <4 3>;
        };

        GreatherThan {
            bindings = <&kp GT>;
            key-positions = <7 8>;
        };

        copy {
            bindings = <&copy>;
            key-positions = <4 5>;
        };

        paste {
            bindings = <&paste>;
            key-positions = <16 17>;
        };

        cut {
            bindings = <&cut>;
            key-positions = <29 28>;
        };

        capslock {
            bindings = <&kp CAPS>;
            key-positions = <34 35>;
        };
    };

    behaviors {
        layer_or_keypress: layer_or_keypress {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_OR_KEYPRESS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tap_hold_keypress: tap_hold_keypress {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_HOLD_KEYPRESS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    macros {
        deleteLastWord: deleteLastWord {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "DELETELASTWORD";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LCTRL &kp C &kt LCTRL>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LCTRL &kp V &kt LCTRL>;
            label = "PASTE";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LCTRL &kp X &kt LCTRL>;
            label = "CUT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TILDE  &kp MINUS                  &kp U                          &kp COMMA                    &kp C                       &kp Z              &kp Q        &kp G                       &kp Y                       &kp H                      &kp SEMICOLON              &kp BACKSLASH
&kp TAB    &tap_hold_keypress LCMD O  &tap_hold_keypress LEFT_ALT I  &tap_hold_keypress LSHIFT A  &tap_hold_keypress LCTRL N  &kp M              &kp D        &tap_hold_keypress RCTRL T  &tap_hold_keypress RSHFT S  &tap_hold_keypress RALT L  &tap_hold_keypress LGUI R  &kp B
&kp PIPE   &kp SQT                    &kp SLASH                      &kp DOT                      &kp W                       &kp V              &kp J        &kp P                       &kp F                       &kp K                      &kp X                      &kp UNDER
                                                                     &lt 2 DELETE                 &kp E                       &lt 1 BACKSPACE    &lt 2 ENTER  &kp SPACE                   &lt 1 TAB
            >;
        };

        lower_layer {
            bindings = <
&trans     &kp MINUS                         &kp NUMBER_1                              &kp NUMBER_2                  &kp NUMBER_3                       &kp KP_ASTERISK    &trans    &kp PG_UP      &kp HOME  &trans     &trans    &trans
&trans     &tap_hold_keypress LEFT_GUI PLUS  &tap_hold_keypress LA(LEFT_ALT) NUMBER_4  &tap_hold_keypress LSHIFT N5  &tap_hold_keypress LCTRL NUMBER_6  &kp KP_DIVIDE      &kp LEFT  &kp DOWN       &kp UP    &kp RIGHT  &kp LGUI  &trans
&kp COMMA  &kp DOT                           &kp N7                                    &kp N8                        &kp N9                             &kp EQUAL          &trans    &kp PAGE_DOWN  &kp END   &trans     &trans    &trans
                                                                                       &trans                        &kp KP_NUMBER_0                    &trans             &trans    &trans         &trans
            >;
        };

        raise_layer {
            bindings = <
&kp TAB  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp KP_MULTIPLY  &kp EQUAL  &trans   &kp BSPC
&trans   &trans    &trans  &trans    &trans    &trans       &trans     &trans    &trans           &trans     &trans   &kp GRAVE
&kp F1   &kp F2    &kp F3  &kp F4    &kp F5    &kp F6       &kp F7     &kp F8    &kp F9           &kp F10    &kp F11  &kp F12
                           &trans    &trans    &trans       &trans     &trans    &trans
            >;
        };

        both {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &rgb_ug RGB_COLOR_HSB(245,100,50)  &rgb_ug RGB_COLOR_HSB(0,100,50)     &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG
&trans        &trans          &trans        &trans        &rgb_ug RGB_COLOR_HSB(311,100,50)  &rgb_ug RGB_COLOR_HSB(54,100,50)    &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &trans
&bt BT_CLR    &bt BT_CLR_ALL  &trans        &out OUT_TOG  &rgb_ug RGB_COLOR_HSB(0,0,100)     &rgb_ug RGB_COLOR_HSB(121,95,49)    &trans           &trans           &trans           &trans           &trans           &trans
                                            &trans        &trans                             &trans                              &trans           &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
